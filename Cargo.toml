[package]
name = "hypersphere"
version = "0.1.0"
edition = "2021"

# See more keys and their definitions at https://doc.rust-lang.org/cargo/reference/manifest.html
[lib]
crate-type = ["cdylib", "rlib"]


[dependencies]
cfg-if = "1"
log = "0.4.17"
tracing = "0.1.37"
tracing-subscriber = {version = "0.3.17", features=["time"]}
tracing-web = "0.1.2"
wgpu = "0.17.1"
winit = "0.28.7"
pollster = "0.3"
bytemuck = { version = "1.12", features = [ "derive" ] }
anyhow = "1.0"
cgmath = "0.18.0"
anise = "^0.1"
chrono = "0.4.31"
bevy_ecs = "0.12.1"
js-sys = "0.3"
futures-channel = "0.3.30"

# Decoding jpegs in WASM isn't very performant.
# If you want to speed up image loading in general 
# in WASM you could opt to use the browser's built-in
# decoders instead of image when building with 
# wasm-bindgen. This will involve creating an <img>
# tag in Rust to get the image, and then a <canvas> to get the pixel data
[dependencies.image]
version = "0.24"
default-features = false
features = ["png", "jpeg"]

[target.'cfg(target_arch = "wasm32")'.dependencies]
console_error_panic_hook = "0.1.6"
console_log = "1.0"
tracing-wasm = "0.2.1"
wgpu = { version = "0.17", features = ["webgl"]}
wasm-bindgen = "0.2"
wasm-bindgen-futures = "0.4.30"
web-sys = { version = "0.3", features = [
    "Document",
    "Window",
    "Element",
    "KeyboardEvent"
]}

[target.x86_64-pc-windows-gnu]
linker = "x86_64-w64-mingw32-gcc"
